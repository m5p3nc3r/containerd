kind: pipeline
name: arm64

workspace:
  base: /go
  path: src/github.com/containerd/containerd

platform:
  os: linux
  arch: arm64

steps:
- name: test
  image: golang:1.11.9
  environment:
#    TRAVIS_GOOS: linux
#    GOARCH: arm64
    CGO_ENABLED: 1
#    TRAVIS_GOOS=linux TEST_RUNTIME=io.containerd.runc.v1 TRAVIS_CGO_ENABLED=1
#    TRAVIS_GOOS=linux TEST_RUNTIME=io.containerd.runc.v2 TRAVIS_CGO_ENABLED=1
#    TRAVIS_GOOS=linux TEST_RUNTIME=io.containerd.runtime.v1.linux TRAVIS_CGO_ENABLED=1
#    TRAVIS_GOOS=darwin TRAVIS_CGO_ENABLED=0

# TODO: Can't do this yet
#  privileged: true

  commands:
    # Dump the configuration name into the log
  - uname -a
    # TODO: Put these into a pre-built container
  - apt-get update -y
  - apt-get install -y btrfs-tools libnl-3-dev libnet-dev protobuf-c-compiler
    python-minimal libcap-dev libaio-dev libprotobuf-c0-dev libprotobuf-dev
    socat libseccomp-dev sudo unzip
    # - protobuf-compiler

  - sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-protobuf
  - sudo chmod +x /usr/local/bin/protoc
  - sudo chmod og+rx /usr/local/include/google /usr/local/include/google/protobuf /usr/local/include/google/protobuf/compiler
  - sudo chmod -R og+r /usr/local/include/google/protobuf/
  - protoc --version
  - go get -u github.com/vbatts/git-validation
  - go get -u github.com/kunalkushwaha/ltag
  - go get -u github.com/LK4D4/vndr
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-runc ; fi
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-cni ; fi
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH script/setup/install-critools ; fi
  - if [ "$GOOS" = "linux" ]; then wget https://github.com/checkpoint-restore/criu/archive/v3.7.tar.gz -O /tmp/criu.tar.gz ; fi
  - if [ "$GOOS" = "linux" ]; then tar -C /tmp/ -zxf /tmp/criu.tar.gz ; fi
  - if [ "$GOOS" = "linux" ]; then cd /tmp/criu-3.7 && sudo make install-criu ; fi
  # TODO: All this part down to here can be put into a pre-built container - save ~5 minutes of build
  - mkdir -p $HOME/build && cd $HOME/build
  # Before script section
  - git clone https://github.com/containerd/project ../project
  # Script section
  - DCO_VERBOSITY=-q ../project/script/validate/dco
  - ../project/script/validate/fileheader ../project/
  - ../project/script/validate/vendor
  - GOOS=linux script/setup/install-dev-tools
  - go build -i .
  - make check
  - if [ "$GOOS" = "linux" ]; then make check-protos check-api-descriptors; fi
  - make build
  - make binaries
  - if [ "$GOOS" = "linux" ]; then sudo make install ; fi
  - if [ "$GOOS" = "linux" ]; then make coverage ; fi
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH make root-coverage ; fi
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH make integration ; fi
  # Run the integration suite a second time. See discussion in github.com/containerd/containerd/pull/1759
  - if [ "$GOOS" = "linux" ]; then sudo PATH=$PATH GOPATH=$GOPATH TESTFLAGS_PARALLEL=1 make integration ; fi
  - |
    if [ "$GOOS" = "linux" ]; then
      sudo mkdir -p /etc/containerd
      sudo bash -c "cat > /etc/containerd/config.toml <<EOF
      [plugins.cri.containerd.default_runtime]
        runtime_type = \"${TEST_RUNTIME}\"
    EOF"
      sudo PATH=$PATH containerd -log-level debug &> /tmp/containerd-cri.log &
      sudo ctr version
      sudo PATH=$PATH GOPATH=$GOPATH critest --runtime-endpoint=/var/run/containerd/containerd.sock --parallel=8
      TEST_RC=$?
      test $TEST_RC -ne 0 && cat /tmp/containerd-cri.log
      sudo pkill containerd
      sudo rm -rf /etc/containerd
      test $TEST_RC -eq 0 || /bin/false
    fi
